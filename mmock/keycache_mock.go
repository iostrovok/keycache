// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iostrovok/keycache (interfaces: IKeyCache)

// Package mmock is a generated GoMock package.
package mmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	keycache "github.com/iostrovok/keycache"
)

// MockIKeyCache is a mock of IKeyCache interface.
type MockIKeyCache struct {
	ctrl     *gomock.Controller
	recorder *MockIKeyCacheMockRecorder
}

// MockIKeyCacheMockRecorder is the mock recorder for MockIKeyCache.
type MockIKeyCacheMockRecorder struct {
	mock *MockIKeyCache
}

// NewMockIKeyCache creates a new mock instance.
func NewMockIKeyCache(ctrl *gomock.Controller) *MockIKeyCache {
	mock := &MockIKeyCache{ctrl: ctrl}
	mock.recorder = &MockIKeyCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIKeyCache) EXPECT() *MockIKeyCacheMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockIKeyCache) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockIKeyCacheMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIKeyCache)(nil).Count))
}

// Get mocks base method.
func (m *MockIKeyCache) Get(arg0 keycache.IItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIKeyCacheMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIKeyCache)(nil).Get), arg0)
}

// Set mocks base method.
func (m *MockIKeyCache) Set(arg0 keycache.IItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIKeyCacheMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIKeyCache)(nil).Set), arg0)
}
